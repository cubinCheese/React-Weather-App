import "./App.css";
import Search from "./components/search/search";
import CurrentWeather from "./components/current-weather/current-weather";
import Forecast from "./components/forecast/forecast";
import LocationTime from "./components/current-location-time/current-location-time";
import { useState } from "react";
import animatedBackground from './gifs/raingirl.gif'; // Import the AnimatedBackground component

// Import services
import apiFetchService from "./firebase/apiFetchService";
import databaseService from "./firebase/databaseService";

//{ fetchCurrentWeather, fetchWeatherForecast, fetchLocationTime }
//{ saveWeatherData, getWeatherData }

function App() {
  console.log("App component rendered");
  const { currentWeatherFetch, forecastFetch, worldTimeFetch } = apiFetchService;
  const { getCachedData, saveCachedData } = databaseService;

  // Creates set-data() and current-data values() through useState
  const [currentWeather, setCurrentWeather] = useState(null);
  const [forecast, setForecast] = useState(null);
  const [locationTime, setLocationTime] = useState(null);


  
  const handleOnSearchChange = async (searchData) => {
    console.log("handleOnSearchChange triggered with:", searchData);
    const [lat, lon] = searchData.value.split(" ");

    // Step 1: Check the database for cached data
    try {
      const cachedData = await getCachedData(searchData.label);
      if (cachedData) {
        console.log("Using cached data from the database");
        setCurrentWeather(cachedData.currentWeather);
        setForecast(cachedData.forecast);
        setLocationTime(cachedData.locationTime);
        return;
      }
    } catch (error) { console.error("Error fetching cached data:", error); }
    // If no cached data, proceed to fetch from APIs

      
    // Step 2: Fetch data from APIs if not in the database & sets state variables
    try {
      console.log("Fetching data from APIs");
      Promise.all([currentWeatherFetch(lat, lon), forecastFetch(lat, lon), worldTimeFetch(lat, lon)]) // returns 'failure' if any fetch failed

        // chained to Promise.all
        // if Promise.all returns successfully
        .then(async (response) => {
          // awaits response that'll be generated by Promise.all - halts code execution until response resolved
          const weatherResponse = await response[0].json();
          const forecastResponse = await response[1].json();
          const worldTimeResponse = await response[2].json();

          /* Spread operator (...) merges objects - removing duplicates with priority on object2 */
          // sets local state variables for weather and forecast, with data from API calls
          setCurrentWeather({ city: searchData.label, ...weatherResponse }); // label comes from search.js
          setForecast({ city: searchData.label, ...forecastResponse });
          setLocationTime({ city: searchData.label, ...worldTimeResponse }); // each search will only have one corresponding world time
      })

      // chained to Promise.all
      // if Promise.all returns failure
      .catch((err) => console.log("Error fetching data", err));
    
    } catch (error) { console.error("Error fetching data from APIs:", error); }

    // Step 3: Save the fetched data (now in state variables) to the database
    try {
      await saveCachedData(searchData.label, {
        currentWeather,
        forecast,
        locationTime,
      });
    } catch (error) { console.error("Error saving data to the database:", error); }


  };

  // now get current weather and forecast for usage
  console.log(currentWeather);
  console.log(forecast);
  console.log(locationTime);

  try {
    return (
      <div>
        <img
          src={animatedBackground}
          alt="Animated Background"
          className="animated-background"
        />

        <div className="container">
          <Search onSearchChange={handleOnSearchChange} />
          <div className="parallel-components">
            {currentWeather && <CurrentWeather data={currentWeather} />}
            {locationTime && (
              <LocationTime data={locationTime} weatherData={currentWeather} />
            )}
          </div>
          {forecast && <Forecast data={forecast} />}
        </div>
      </div>
    ); 
  } catch (error) {
    console.error("Error rendering App:", error);
    return <p>Something went wrong!</p>;
  }


} 

export default App;
