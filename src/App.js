import "./App.css";
import Search from "./components/search/search";
import CurrentWeather from "./components/current-weather/current-weather";
import { WEATHER_API_KEY, WEATHER_API_URL } from "./api";
import { useState } from "react";

function App() {
  // Creates set-weather() and current-weather value() through useState
  const [currentWeather, setCurrentWeather] = useState(null);
  const [forecast, setForecast] = useState(null);

  const handleOnSearchChange = (searchData) => {
    // API returns value: "lat long" - this splits the string into two actual values
    const [lat, lon] = searchData.value.split(" ");

    // API calls, specific usage described on API service's source website (e.g. data for weather, data for forecast)
    const currentWeatherFetch = fetch(
      `${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}`
    );
    const forecastFetch = fetch(
      `${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}`
    );

    // Ensure all fetches were successful
    Promise.all([currentWeatherFetch, forecastFetch]) // returns 'failure' if any fetch failed

      // chained to Promise.all
      // if Promise.all returns successfully
      .then(async (response) => {
        // awaits response that'll be generated by Promise.all - halts code execution until response resolved
        const weatherResponse = await response[0].json();
        const forecastResponse = await response[1].json();

        /* Spread operator (...) merges objects - removing duplicates with priority on object2 */
        // sets local state variables for weather and forecast, with data from API calls
        setCurrentWeather({ city: searchData.label, ...weatherResponse }); // label comes from search.js
        setForecast({ city: forecastResponse, ...weatherResponse });
      })

      // chained to Promise.all
      // if Promise.all returns failure
      .catch((err) => console.log(err));
  };

  // now get current weather and forecast for usage
  console.log(currentWeather);
  console.log(forecast);

  return (
    <div className="container">
      <Search onSearchChange={handleOnSearchChange} />
      {currentWeather && <CurrentWeather data={currentWeather} />}
    </div>
  );
}

export default App;
